name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy with Kamal
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2.3'
        bundler-cache: true

    - name: Install Kamal
      run: gem install kamal

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Create Kamal secrets
      run: |
        mkdir -p .kamal
        echo "RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}" >> .kamal/secrets
        echo "SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}" >> .kamal/secrets
        echo "KAMAL_REGISTRY_USERNAME=${{ secrets.KAMAL_REGISTRY_USERNAME }}" >> .kamal/secrets
        echo "KAMAL_REGISTRY_PASSWORD=${{ secrets.KAMAL_REGISTRY_PASSWORD }}" >> .kamal/secrets
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .kamal/secrets

    # 【変更】デプロイ実行とログ保存
    - name: Deploy with Kamal
      run: |
        # デプロイ実行しながらログをファイルに保存
        kamal deploy 2>&1 | tee deploy.log
        # 終了コードを保存
        echo $? > deploy_exit_code.txt

    # 【追加】ログ整形・色付き表示
    - name: Format and Display Deploy Logs
      if: always()  # 成功・失敗に関わらず実行
      run: |
        # 色定義（ANSIエスケープシーケンス）
        RED='\033[0;31m'
        YELLOW='\033[0;33m'
        BLUE='\033[0;34m'
        GREEN='\033[0;32m'
        CYAN='\033[0;36m'
        BOLD='\033[1m'
        NC='\033[0m' # No Color
        
        echo "Processing deployment logs..."
        
        # 整形済みログファイルの作成
        {
          echo -e "${BOLD}${BLUE}===== Deployment Log Summary =====${NC}"
          echo ""
          
          # フェーズの概要を表形式で表示
          echo -e "${BOLD}${CYAN}Deployment Phases:${NC}"
          echo "----------------------------------------"
          
          # Running/Finished のフェーズを抽出して表示
          grep -E "(Running|Finished)" deploy.log | while IFS= read -r line; do
            if echo "$line" | grep -q "ERROR\|FAIL\|Fatal"; then
              echo -e "${RED}$line${NC}"
            elif echo "$line" | grep -q "Finished"; then
              echo -e "${GREEN}$line${NC}"
            else
              echo -e "${CYAN}$line${NC}"
            fi
          done
          
          echo ""
          echo -e "${BOLD}${BLUE}===== Error Summary =====${NC}"
          echo ""
          
          # エラー/失敗系のログを強調表示
          if grep -iE "(error|fail|fatal|exception|abort|critical)" deploy.log > /dev/null; then
            echo -e "${RED}Errors/Failures detected:${NC}"
            echo "----------------------------------------"
            
            # エラー前後の文脈を表示（前2行、後2行）
            grep -B 2 -A 2 -iE "(error|fail|fatal|exception|abort|critical)" deploy.log | while IFS= read -r line; do
              if echo "$line" | grep -iE "(error|fail|fatal|exception|abort|critical)"; then
                echo -e "${RED}${BOLD}$line${NC}"
              elif [ "$line" != "--" ]; then
                echo -e "${YELLOW}$line${NC}"
              fi
            done
          else
            echo -e "${GREEN}No errors detected in deployment.${NC}"
          fi
          
          echo ""
          echo -e "${BOLD}${BLUE}===== Full Log (first 500 lines) =====${NC}"
          echo ""
          
          # フルログの最初の500行を表示（色付き）
          head -n 500 deploy.log | while IFS= read -r line; do
            if echo "$line" | grep -iE "(error|fail|fatal|exception|abort|critical)"; then
              echo -e "${RED}$line${NC}"
            elif echo "$line" | grep -E "(Running|Starting|Building|Pushing|Deploying)"; then
              echo -e "${CYAN}$line${NC}"
            elif echo "$line" | grep -E "(Finished|Success|Complete|Done)"; then
              echo -e "${GREEN}$line${NC}"
            elif echo "$line" | grep -E "^(==|--|\#\#)"; then
              echo -e "${BLUE}$line${NC}"
            else
              echo "$line"
            fi
          done
          
          # 500行を超える場合は省略メッセージ
          if [ $(wc -l < deploy.log) -gt 500 ]; then
            echo ""
            echo -e "${YELLOW}... (log truncated, showing first 500 lines of $(wc -l < deploy.log) total)${NC}"
          fi
        } | tee skimmed.log
        
        # デプロイの終了コードをチェック
        EXIT_CODE=$(cat deploy_exit_code.txt)
        if [ "$EXIT_CODE" -eq 0 ]; then
          echo ""
          echo -e "${GREEN}${BOLD}✅ Deployment completed successfully!${NC}"
        else
          echo ""
          echo -e "${RED}${BOLD}❌ Deployment failed with exit code: $EXIT_CODE${NC}"
        fi

    # 【追加】GitHub Actions Summary に出力
    - name: Write to GitHub Step Summary
      if: always()
      run: |
        # GitHub Actions Summary に整形済みログを出力
        {
          echo "## 📦 Deployment Log Summary"
          echo ""
          echo "### Deployment Status"
          
          EXIT_CODE=$(cat deploy_exit_code.txt || echo "1")
          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "✅ **Deployment completed successfully!**"
          else
            echo "❌ **Deployment failed with exit code: $EXIT_CODE**"
          fi
          
          echo ""
          echo "### Deployment Phases"
          echo '```'
          grep -E "(Running|Finished)" deploy.log | head -20 || echo "No phase information found"
          echo '```'
          
          echo ""
          echo "### Error Summary"
          if grep -iE "(error|fail|fatal|exception|abort|critical)" deploy.log > /dev/null; then
            echo "⚠️ **Errors detected during deployment:**"
            echo '```'
            grep -B 1 -A 1 -iE "(error|fail|fatal|exception|abort|critical)" deploy.log | head -50
            echo '```'
          else
            echo "✅ **No errors detected**"
          fi
          
          echo ""
          echo "### Log Preview (first 100 lines)"
          echo '```'
          head -n 100 deploy.log
          echo '```'
          
          if [ $(wc -l < deploy.log) -gt 100 ]; then
            echo ""
            echo "_Full logs available in artifacts ($(wc -l < deploy.log) lines total)_"
          fi
        } >> $GITHUB_STEP_SUMMARY

    # 【追加】アーティファクトとしてログを保存
    - name: Upload deployment logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-logs
        path: |
          deploy.log
          skimmed.log
        retention-days: 30